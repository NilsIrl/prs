image: "rust:slim"

stages:
  - check
  - build
  - test
  - package
  - pre-release
  - release

# Variable defaults
variables:
  RUST_VERSION: stable
  TARGET: x86_64-unknown-linux-gnu
  APT_GTK_LIBS: libgtk-3-dev
  BREW_PACKAGES: gpg gpgme gtk+3

# Cache rust/cargo/build artifacts
cache:
  key: "$CI_PIPELINE_ID-$RUST_VERSION"
  paths:
    - /usr/local/cargo/registry/
    - /usr/local/rustup/toolchains/
    - /usr/local/rustup/update-hashes/
    - target/

# Install compiler and OpenSSL dependencies
before_script:
  - apt-get update
  - apt-get install -y --no-install-recommends libgpgme-dev build-essential pkg-config xorg-dev python3 libx11-xcb-dev libgl1-mesa-dev libdbus-1-dev $APT_GTK_LIBS $APT_PACKAGES
  - apt-get install -y $APT_PACKAGES_RECOMMENDS
  - |
    rustup install $RUST_VERSION
    rustup default $RUST_VERSION
  - |
    rustc --version
    cargo --version

# Check on stable, beta and nightly 
.check-base: &check-base
  stage: check
  script:
    - cargo check --verbose
    - cd cli && cargo check --no-default-features --verbose && cd ..
check-stable:
  <<: *check-base
check-beta:
  <<: *check-base
  variables:
    RUST_VERSION: beta
check-nightly:
  <<: *check-base
  variables:
    RUST_VERSION: nightly
check-old:
  <<: *check-base
  variables:
    RUST_VERSION: "1.45.0"
check-macos-stable:
  tags:
    - macos
  cache: {}
  only:
    - master
    - /^v(\d+\.)*\d+$/
  before_script:
    - |
      rustup install $RUST_VERSION
      rustup default $RUST_VERSION
    - |
      rustc --version
      cargo --version
    - brew install $BREW_PACKAGES
  <<: *check-base

# Build using Rust stable on Linux
build-x86_64-linux-gnu:
  stage: build
  needs: []
  script:
    - cargo build --target=$TARGET --release --verbose
    - mv target/$TARGET/release/prs ./prs-$TARGET
    - mv target/$TARGET/release/prs-gtk3-copy ./prs-gtk3-copy-$TARGET
    - strip -g ./prs-$TARGET
    - strip -g ./prs-gtk3-copy-$TARGET
  artifacts:
    name: prs-x86_64-linux-gnu
    paths:
      - prs-$TARGET
      - prs-gtk3-copy-$TARGET
    expire_in: 1 month

# Build a static version
build-x86_64-linux-musl:
  stage: build
  needs: []
  variables:
    TARGET: x86_64-unknown-linux-musl
    APT_PACKAGES: "bzip2 gnupg2 curl libsystemd-dev"
    PKG_CONFIG_ALLOW_CROSS: 1
    PKG_CONFIG_ALL_STATIC: 1
    LIBGPG_ERROR_INCLUDE: "$PREFIX/include"
    LIBGPG_ERROR_LIB_DIR: "$PREFIX/lib"
    LIBGPG_ERROR_LIBS: "gpg-error"
    LIBGPG_ERROR_STATIC: 1
    GPGME_INCLUDE: "$PREFIX/include"
    GPGME_LIB_DIR: "$PREFIX/lib"
    GPGME_LIBS: "gpgme:assuan"
    GPGME_STATIC: 1
  script:
    - ./ci/gpgme/build

    - rustup target add $TARGET
    - cargo build --target=$TARGET --release --verbose

    # Prepare the release artifact, strip it
    - find . -name prs -exec ls -lah {} \;
    - mv target/$TARGET/release/prs ./prs-$TARGET
    - mv target/$TARGET/release/prs-gtk3-copy ./prs-gtk3-copy-$TARGET
    - strip -g ./prs-$TARGET
    - strip -g ./prs-gtk3-copy-$TARGET
  artifacts:
    name: prs-x86_64-linux-musl
    paths:
      - prs-$TARGET
      - prs-gtk3-copy-$TARGET
    expire_in: 1 month

# Build using Rust stable on macOS
build-macos:
  stage: build
  tags:
    - macos
  cache: {}
  only:
    - master
    - /^v(\d+\.)*\d+$/
  needs: []
  variables:
    TARGET: x86_64-apple-darwin
  before_script:
    - |
      rustup install $RUST_VERSION
      rustup default $RUST_VERSION
    - |
      rustc --version
      cargo --version
    - brew install $BREW_PACKAGES
  script:
    - cargo build --target=$TARGET --release --verbose
    - mv target/$TARGET/release/prs ./prs-$TARGET
    - mv target/$TARGET/release/prs-gtk3-copy ./prs-gtk3-copy-$TARGET
  artifacts:
    name: prs-x86_64-macos
    paths:
      - prs-$TARGET
      - prs-gtk3-copy-$TARGET
    expire_in: 1 month

# Run the unit tests through Cargo
test-cargo:
  stage: test
  needs: []
  dependencies: []
  script:
    - cargo test --verbose

# Run basic integration test with prs
test-integration:
  image: alpine
  stage: test
  needs:
    - build-x86_64-linux-musl
  dependencies:
    - build-x86_64-linux-musl
  variables:
    TARGET: x86_64-unknown-linux-musl
  before_script: []
  script:
    - apk add git gnupg gpgme
    - mv ./prs-$TARGET ./prs

    - git config --global user.email example@example.org
    - git config --global user.name "Example User"

    # TODO: add/edit/remove secrets
    - ./prs init
    - ./prs sync init
    - ./prs list
    - ./prs sync

# Package a Docker image
package-docker:
  image: docker:git
  stage: package
  dependencies:
    - build-x86_64-linux-musl
  services:
    - docker:dind
  variables:
    TARGET: x86_64-unknown-linux-musl
    DOCKER_HOST: tcp://docker:2375
    # DOCKER_DRIVER: overlay2
  before_script: []
  script:
    - ls -al

    # Place binary in Docker directory
    - mv ./prs-$TARGET ./pkg/docker/prs

    # Build the Docker image, run it once to test
    - cd ./pkg/docker
    - docker build -t timvisee/prs:latest ./
    - docker run --rm timvisee/prs:latest -V
    - cd ../..

    # Export image as artifact
    - docker image save -o ./prs-docker-$TARGET.tar timvisee/prs:latest
  artifacts:
    name: prs-docker-x86_64-linux-musl
    paths:
      - prs-docker-$TARGET.tar
    expire_in: 1 month

# Release binaries on GitLab as generic package
release-gitlab-generic-package:
  image: curlimages/curl
  stage: pre-release
  dependencies:
    - build-x86_64-linux-gnu
    - build-x86_64-linux-musl
    - build-macos
  only:
    - /^v(\d+\.)*\d+$/
  variables:
    LINUX_GNU_BIN: "prs-x86_64-unknown-linux-gnu"
    LINUX_GNU_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-unknown-linux-gnu"
    LINUX_MUSL_BIN: "prs-x86_64-unknown-linux-musl"
    LINUX_MUSL_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-unknown-linux-musl"
    MACOS_BIN: "prs-x86_64-apple-darwin"
    MACOS_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-apple-darwin"
  before_script: []
  script:
    # Get version based on tag, determine registry URL
    - VERSION=$(echo $CI_COMMIT_REF_NAME | cut -c 2-)
    - PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/prs/${VERSION}"

    # Publish packages
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_GNU_BIN} ${PACKAGE_REGISTRY_URL}/${LINUX_GNU_BIN}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_GNU_BIN_GTK_COPY} ${PACKAGE_REGISTRY_URL}/${LINUX_GNU_BIN_GTK_COPY}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_MUSL_BIN} ${PACKAGE_REGISTRY_URL}/${LINUX_MUSL_BIN}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_MUSL_BIN_GTK_COPY} ${PACKAGE_REGISTRY_URL}/${LINUX_MUSL_BIN_GTK_COPY}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${MACOS_BIN} ${PACKAGE_REGISTRY_URL}/${MACOS_BIN}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${MACOS_BIN_GTK_COPY} ${PACKAGE_REGISTRY_URL}/${MACOS_BIN_GTK_COPY}

# Publish GitLab release
release-gitlab-release:
  image: registry.gitlab.com/gitlab-org/release-cli
  stage: release
  needs:
    - release-gitlab-generic-package
  only:
    - /^v(\d+\.)*\d+$/
  variables:
    LINUX_GNU_BIN: "prs-x86_64-unknown-linux-gnu"
    LINUX_GNU_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-unknown-linux-gnu"
    LINUX_MUSL_BIN: "prs-x86_64-unknown-linux-musl"
    LINUX_MUSL_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-unknown-linux-musl"
    MACOS_BIN: "prs-x86_64-apple-darwin"
    MACOS_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-apple-darwin"
  before_script: []
  script:
    # Get version based on tag, determine registry URL
    - VERSION=$(echo $CI_COMMIT_REF_NAME | cut -c 2-)
    - PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/prs/${VERSION}"

    # Publish release
    - |
      release-cli create --name "$CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"${LINUX_GNU_BIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_GNU_BIN}\"}" \
        --assets-link "{\"name\":\"${LINUX_GNU_BIN_GTK_COPY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_GNU_BIN_GTK_COPY}\"}" \
        --assets-link "{\"name\":\"${LINUX_MUSL_BIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_MUSL_BIN}\"}" \
        --assets-link "{\"name\":\"${LINUX_MUSL_BIN_GTK_COPY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_MUSL_BIN_GTK_COPY}\"}" \
        --assets-link "{\"name\":\"${MACOS_BIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${MACOS_BIN}\"}" \
        --assets-link "{\"name\":\"${MACOS_BIN_GTK_COPY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${MACOS_BIN_GTK_COPY}\"}"

# Cargo crate release
release-crate:
  stage: release
  dependencies: []
  only:
    - /^v(\d+\.)*\d+$/
  script:
    - echo "Creating release crate to publish on crates.io..."
    - echo $CARGO_TOKEN | cargo login
    - echo "Publishing crate to crates.io..."
    - cargo publish --verbose --allow-dirty

# Publish a Docker image
release-docker:
  image: docker:git
  stage: release
  only:
    - /^v(\d+\.)*\d+$/
  dependencies:
    - package-docker
  services:
    - docker:dind
  variables:
    TARGET: x86_64-unknown-linux-musl
    DOCKER_HOST: tcp://docker:2375
    # DOCKER_DRIVER: overlay2
  before_script: []
  script:
    # Import Docker image
    - docker image load ./prs-docker-$TARGET.tar

    # Retag version
    - VERSION=$(echo $CI_COMMIT_REF_NAME | cut -c 2-)
    - echo "Determined Docker image version number 'v$VERSION', retagging image..."
    - docker tag timvisee/prs:latest timvisee/prs:$VERSION

    # TODO: publish on GitLab registry as well

    # Authenticate and push the Docker images
    - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
    - docker push timvisee/prs:$VERSION
    - docker push timvisee/prs:latest
