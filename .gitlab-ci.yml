image: "rust:slim"

stages:
  - check
  - build
  - test
  - release
  - package

# Variable defaults
variables:
  RUST_VERSION: stable
  RUST_TARGET: x86_64-unknown-linux-gnu

# Cache rust/cargo/build artifacts
cache:
  key: "$CI_PIPELINE_ID-$RUST_VERSION"
  paths:
    - /usr/local/cargo/registry/
    - /usr/local/rustup/toolchains/
    - /usr/local/rustup/update-hashes/
    - target/

# Install compiler and OpenSSL dependencies
before_script:
  - apt-get update
  - apt-get install -y --no-install-recommends libgpgme-dev build-essential pkg-config xorg-dev python3 libx11-xcb-dev libgl1-mesa-dev libdbus-1-dev
  - |
    rustup install $RUST_VERSION
    rustup default $RUST_VERSION
  - |
    rustc --version
    cargo --version

# Check on stable, beta and nightly 
.check-base: &check-base
  stage: check
  script:
    - cargo check --verbose
check-stable:
  <<: *check-base
check-beta:
  <<: *check-base
  variables:
    RUST_VERSION: beta
check-nightly:
  <<: *check-base
  variables:
    RUST_VERSION: nightly
check-old:
  <<: *check-base
  variables:
    RUST_VERSION: "1.45.0"
check-macos-stable:
  tags:
    - macos
  cache: {}
  only:
    - master
    - /^v(\d+\.)*\d+$/
  before_script:
    - |
      rustup install $RUST_VERSION
      rustup default $RUST_VERSION
    - |
      rustc --version
      cargo --version
    - brew install gpg gpgme
  <<: *check-base

# Build using Rust stable on Linux
build-x86_64-linux-gnu:
  stage: build
  needs: []
  script:
    - cargo build --target=$RUST_TARGET --release --verbose
    - mv target/$RUST_TARGET/release/prs ./prs-$RUST_TARGET
    - strip -g ./prs-$RUST_TARGET
  artifacts:
    name: prs-x86_64-linux-gnu
    paths:
      - prs-$RUST_TARGET
    expire_in: 1 month

# Build using Rust stable on macOS
build-macos:
  stage: build
  tags:
    - macos
  cache: {}
  only:
    - master
    - /^v(\d+\.)*\d+$/
  needs: []
  before_script:
    - |
      rustup install $RUST_VERSION
      rustup default $RUST_VERSION
    - |
      rustc --version
      cargo --version
    - brew install gpg gpgme
  script:
    - cargo build --release --verbose
    - mv target/release/prs ./prs
    # - strip -g ./prs
  artifacts:
    name: prs-macos
    paths:
      - prs
    expire_in: 1 month

# Run the unit tests through Cargo
test-cargo:
  stage: test
  needs: []
  dependencies: []
  script:
    - cargo test --verbose

# Cargo crate release
release-crate:
  stage: release
  dependencies: []
  only:
    - /^v(\d+\.)*\d+$/
  script:
    - echo "Creating release crate to publish on crates.io..."
    - echo $CARGO_TOKEN | cargo login
    - echo "Publishing crate to crates.io..."
    - cargo publish --verbose --allow-dirty
