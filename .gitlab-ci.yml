image: "rust:slim"

stages:
  - check
  - build
  - test
  - package
  - pre-release
  - release

# Variable defaults
variables:
  RUST_VERSION: stable
  TARGET: x86_64-unknown-linux-gnu
  APT_GTK_LIBS: libgtk-3-dev
  BREW_PACKAGES: gpg gpgme gtk+3
  FEATURES_CLI_UNIX: backend-gpgme,alias,clipboard,notify
  FEATURES_GTK3_UNIX: backend-gpgme
  FEATURES_CLI_WINDOWS: backend-gnupg-bin,clipboard,notify

# Install compiler and OpenSSL dependencies
before_script:
  - apt-get update
  - apt-get install -y --no-install-recommends libgpgme-dev build-essential pkg-config xorg-dev python3 libx11-xcb-dev libdbus-1-dev libgl1-mesa-dev $APT_GTK_LIBS $APT_PACKAGES
  - apt-get install -y $APT_PACKAGES_RECOMMENDS
  - |
    rustup install $RUST_VERSION
    rustup default $RUST_VERSION
  - |
    rustc --version
    cargo --version

# Rust build cache configuration
.rust-build-cache: &rust-build-cache
  key: "$CI_PIPELINE_ID-$RUST_VERSION"
  paths:
    - target/

# Rust build cache configuration
.before_script-windows: &before_script-windows
  before_script:
    # Install scoop
    - Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')

    # Install Rust
    - scoop install rustup
    - rustup install $RUST_VERSION
    - rustup default $RUST_VERSION
    - rustc --version
    - cargo --version

    # Install GPGME
    - scoop install gpg

# Check on stable, beta and nightly 
.check-base: &check-base
  stage: check
  cache:
    <<: *rust-build-cache
  script:
    - cargo check --verbose
    - cd cli; cargo check --no-default-features --features $FEATURES_CLI_UNIX --verbose; cd ..
    - cd gtk3; cargo check --no-default-features --features $FEATURES_GTK3_UNIX --verbose; cd ..
    - cd lib; cargo check --no-default-features --features backend-gpgme --verbose; cd ..
    - cd lib; cargo check --no-default-features --features backend-gnupg-bin --verbose; cd ..
    - cd cli; cargo check --no-default-features --features backend-gpgme --verbose; cd ..
    - cd cli; cargo check --no-default-features --features backend-gnupg-bin --verbose; cd ..
    - cd gtk3; cargo check --no-default-features --features backend-gpgme --verbose; cd ..
    - cd gtk3; cargo check --no-default-features --features backend-gnupg-bin --verbose; cd ..
check-stable:
  <<: *check-base
check-beta:
  <<: *check-base
  variables:
    RUST_VERSION: beta
check-nightly:
  <<: *check-base
  variables:
    RUST_VERSION: nightly
check-old:
  <<: *check-base
  variables:
    RUST_VERSION: "1.46.0"
check-macos-stable:
  tags:
    - macos
  only:
    - master
    - /^v(\d+\.)*\d+$/
  before_script:
    - |
      rustup install $RUST_VERSION
      rustup default $RUST_VERSION
    - |
      rustc --version
      cargo --version
    - brew update
    - brew upgrade
    - brew install $BREW_PACKAGES
  <<: *check-base
check-windows:
  stage: check
  tags:
    - windows
  cache: {}
  <<: *before_script-windows
  script:
    - cd lib; cargo check --no-default-features --features $FEATURES_CLI_WINDOWS --verbose; cd ..
    - cd lib; cargo check --no-default-features --features backend-gnupg-bin --verbose; cd ..
    - cd cli; cargo check --no-default-features --features backend-gnupg-bin --verbose; cd ..

# Build using Rust stable on Linux
build-x86_64-linux-gnu:
  stage: build
  needs: []
  cache:
    <<: *rust-build-cache
  script:
    - cd cli; cargo build --target=$TARGET --release --no-default-features --features $FEATURES_CLI_UNIX --verbose; cd ..
    - cd gtk3; cargo build --target=$TARGET --release --no-default-features --features $FEATURES_GTK3_UNIX --verbose; cd ..
    - mv target/$TARGET/release/prs ./prs-$TARGET
    - mv target/$TARGET/release/prs-gtk3-copy ./prs-gtk3-copy-$TARGET
    - strip -g ./prs-$TARGET
    - strip -g ./prs-gtk3-copy-$TARGET
  artifacts:
    name: prs-x86_64-linux-gnu
    paths:
      - prs-$TARGET
      - prs-gtk3-copy-$TARGET
    expire_in: 1 month

# Build a static version
build-x86_64-linux-musl:
  stage: build
  needs: []
  variables:
    TARGET: x86_64-unknown-linux-musl
    APT_PACKAGES: "bzip2 gnupg2 curl libsystemd-dev"
    PKG_CONFIG_ALLOW_CROSS: 1
    PKG_CONFIG_ALL_STATIC: 1
    LIBGPG_ERROR_INCLUDE: "$PREFIX/include"
    LIBGPG_ERROR_LIB_DIR: "$PREFIX/lib"
    LIBGPG_ERROR_LIBS: "gpg-error"
    LIBGPG_ERROR_STATIC: 1
    GPGME_INCLUDE: "$PREFIX/include"
    GPGME_LIB_DIR: "$PREFIX/lib"
    GPGME_LIBS: "gpgme:assuan"
    GPGME_STATIC: 1
  cache:
    <<: *rust-build-cache
  script:
    - ./ci/gpgme/build

    - rustup target add $TARGET
    - cd cli; cargo build --target=$TARGET --release --no-default-features --features $FEATURES_CLI_UNIX --verbose; cd ..
    - cd gtk3; cargo build --target=$TARGET --release --no-default-features --features $FEATURES_GTK3_UNIX --verbose; cd ..

    # Prepare the release artifact, strip it
    - find . -name prs -exec ls -lah {} \;
    - mv target/$TARGET/release/prs ./prs-$TARGET
    - mv target/$TARGET/release/prs-gtk3-copy ./prs-gtk3-copy-$TARGET
    - strip -g ./prs-$TARGET
    - strip -g ./prs-gtk3-copy-$TARGET
  artifacts:
    name: prs-x86_64-linux-musl
    paths:
      - prs-$TARGET
      - prs-gtk3-copy-$TARGET
    expire_in: 1 month

# Build using Rust stable on macOS
build-macos:
  stage: build
  tags:
    - macos
  only:
    - master
    - /^v(\d+\.)*\d+$/
  needs: []
  variables:
    TARGET: x86_64-apple-darwin
  before_script:
    - |
      rustup install $RUST_VERSION
      rustup default $RUST_VERSION
    - |
      rustc --version
      cargo --version
    - brew update
    - brew upgrade
    - brew install $BREW_PACKAGES
  script:
    - cd cli; cargo build --target=$TARGET --release --no-default-features --features $FEATURES_CLI_UNIX --verbose; cd ..
    - cd gtk3; cargo build --target=$TARGET --release --no-default-features --features $FEATURES_GTK3_UNIX --verbose; cd ..
    - mv target/$TARGET/release/prs ./prs-$TARGET
    - mv target/$TARGET/release/prs-gtk3-copy ./prs-gtk3-copy-$TARGET
  artifacts:
    name: prs-x86_64-macos
    paths:
      - prs-$TARGET
      - prs-gtk3-copy-$TARGET
    expire_in: 1 month

# Build using Rust stable on Windows
build-x86_64-windows:
  stage: build
  tags:
    - windows
  needs: []
  variables:
    TARGET: x86_64-pc-windows-msvc
  <<: *before_script-windows
  script:
    - cd cli; cargo build --target=$TARGET --release --no-default-features --features $FEATURES_CLI_WINDOWS --verbose; cd ..
    - mv target\$env:TARGET\release\prs.exe .\prs-$env:TARGET.exe
  artifacts:
    name: prs-x86_64-windows
    paths:
      - prs-$TARGET.exe
    expire_in: 1 month

# Run the unit tests through Cargo
test-cargo:
  stage: test
  needs: []
  dependencies: []
  cache:
    <<: *rust-build-cache
  script:
    - cargo test --verbose

# Run basic integration test with prs
test-integration:
  image: alpine
  stage: test
  needs:
    - build-x86_64-linux-musl
  dependencies:
    - build-x86_64-linux-musl
  variables:
    TARGET: x86_64-unknown-linux-musl
  before_script: []
  script:
    - apk add git gnupg gpgme
    - mv ./prs-$TARGET ./prs

    - git config --global user.email example@example.org
    - git config --global user.name "Example User"

    # TODO: add/edit/remove secrets
    - ./prs init
    - ./prs sync init
    - ./prs list
    - ./prs sync

# Package a Docker image
package-docker:
  image: docker:latest
  stage: package
  dependencies:
    - build-x86_64-linux-musl
  services:
    - docker:dind
  variables:
    TARGET: x86_64-unknown-linux-musl
    IMAGE_NAME: prs:$CI_COMMIT_SHA
    DOCKER_HOST: tcp://docker:2375
    # DOCKER_DRIVER: overlay2
  before_script: []
  script:
    - ls -al

    # Place binary in Docker directory
    - mv ./prs-$TARGET ./pkg/docker/prs

    # Build the Docker image, run it once to test
    - cd ./pkg/docker
    - docker build -t $IMAGE_NAME ./
    - docker run --rm $IMAGE_NAME -V
    - cd ../..

    # Export image as artifact
    - docker image save -o ./prs-docker-$TARGET.tar $IMAGE_NAME
  artifacts:
    name: prs-docker-x86_64-linux-musl
    paths:
      - prs-docker-$TARGET.tar
    expire_in: 1 month

# Release binaries on GitLab as generic package
release-gitlab-generic-package:
  image: curlimages/curl
  stage: pre-release
  dependencies:
    - build-x86_64-linux-gnu
    - build-x86_64-linux-musl
    - build-macos
    - build-x86_64-windows
  only:
    - /^v(\d+\.)*\d+$/
  variables:
    LINUX_GNU_BIN: "prs-x86_64-unknown-linux-gnu"
    LINUX_GNU_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-unknown-linux-gnu"
    LINUX_MUSL_BIN: "prs-x86_64-unknown-linux-musl"
    LINUX_MUSL_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-unknown-linux-musl"
    MACOS_BIN: "prs-x86_64-apple-darwin"
    MACOS_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-apple-darwin"
    WINDOWS_BIN: "prs-x86_64-pc-windows-msvc.exe"
  before_script: []
  script:
    # Get version based on tag, determine registry URL
    - VERSION=$(echo $CI_COMMIT_REF_NAME | cut -c 2-)
    - PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/prs/${VERSION}"

    # Publish packages
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_GNU_BIN} ${PACKAGE_REGISTRY_URL}/${LINUX_GNU_BIN}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_GNU_BIN_GTK_COPY} ${PACKAGE_REGISTRY_URL}/${LINUX_GNU_BIN_GTK_COPY}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_MUSL_BIN} ${PACKAGE_REGISTRY_URL}/${LINUX_MUSL_BIN}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_MUSL_BIN_GTK_COPY} ${PACKAGE_REGISTRY_URL}/${LINUX_MUSL_BIN_GTK_COPY}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${MACOS_BIN} ${PACKAGE_REGISTRY_URL}/${MACOS_BIN}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${MACOS_BIN_GTK_COPY} ${PACKAGE_REGISTRY_URL}/${MACOS_BIN_GTK_COPY}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${WINDOWS_BIN} ${PACKAGE_REGISTRY_URL}/${WINDOWS_BIN}

# Publish GitLab release
release-gitlab-release:
  image: registry.gitlab.com/gitlab-org/release-cli
  stage: release
  only:
    - /^v(\d+\.)*\d+$/
  variables:
    LINUX_GNU_BIN: "prs-x86_64-unknown-linux-gnu"
    LINUX_GNU_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-unknown-linux-gnu"
    LINUX_MUSL_BIN: "prs-x86_64-unknown-linux-musl"
    LINUX_MUSL_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-unknown-linux-musl"
    MACOS_BIN: "prs-x86_64-apple-darwin"
    MACOS_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-apple-darwin"
    WINDOWS_BIN: "prs-x86_64-pc-windows-msvc.exe"
  before_script: []
  script:
    # Get version based on tag, determine registry URL
    - VERSION=$(echo $CI_COMMIT_REF_NAME | cut -c 2-)
    - PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/prs/${VERSION}"

    # Publish release
    - |
      release-cli create --name "prs $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"${LINUX_GNU_BIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_GNU_BIN}\"}" \
        --assets-link "{\"name\":\"${LINUX_GNU_BIN_GTK_COPY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_GNU_BIN_GTK_COPY}\"}" \
        --assets-link "{\"name\":\"${LINUX_MUSL_BIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_MUSL_BIN}\"}" \
        --assets-link "{\"name\":\"${LINUX_MUSL_BIN_GTK_COPY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_MUSL_BIN_GTK_COPY}\"}" \
        --assets-link "{\"name\":\"${MACOS_BIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${MACOS_BIN}\"}" \
        --assets-link "{\"name\":\"${MACOS_BIN_GTK_COPY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${MACOS_BIN_GTK_COPY}\"}" \
        --assets-link "{\"name\":\"${WINDOWS_BIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${WINDOWS_BIN}\"}"

# Publish GitHub release
release-github:
  stage: release
  only:
    - /^v(\d+\.)*\d+$/
  dependencies:
    - build-x86_64-linux-gnu
    - build-x86_64-linux-musl
    - build-macos
    - build-x86_64-windows
  before_script: []
  script:
    # Install dependencies
    - apt-get update
    - apt-get install -y curl wget gzip netbase

    # Download github-release binary
    - wget https://github.com/tfausak/github-release/releases/download/1.2.5/github-release-linux.gz -O github-release.gz
    - gunzip github-release.gz
    - chmod a+x ./github-release

    # Create the release, upload binaries
    - ./github-release release --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --title "prs $CI_COMMIT_REF_NAME"
    - ./github-release upload --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --file ./prs-x86_64-unknown-linux-gnu --name prs-$CI_COMMIT_REF_NAME-linux-x64
    - ./github-release upload --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --file ./prs-gtk3-copy-x86_64-unknown-linux-gnu --name prs-gtk3-copy-$CI_COMMIT_REF_NAME-linux-x64
    - ./github-release upload --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --file ./prs-x86_64-unknown-linux-musl --name prs-$CI_COMMIT_REF_NAME-linux-x64-static
    - ./github-release upload --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --file ./prs-gtk3-copy-x86_64-unknown-linux-musl --name prs-gtk3-copy-$CI_COMMIT_REF_NAME-linux-x64-static
    - ./github-release upload --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --file ./prs-x86_64-apple-darwin --name prs-$CI_COMMIT_REF_NAME-macos
    - ./github-release upload --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --file ./prs-gtk3-copy-x86_64-apple-darwin --name prs-gtk3-copy-$CI_COMMIT_REF_NAME-macos
    - ./github-release upload --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --file ./prs-x86_64-pc-windows-msvc.exe --name prs-$CI_COMMIT_REF_NAME-windows.exe

# Cargo crate release
release-crate:
  stage: release
  dependencies: []
  only:
    - /^v(\d+\.)*\d+$/
  before_script: []
  script:
    - echo "Creating release crate to publish on crates.io..."
    - echo $CARGO_TOKEN | cargo login
    - echo "Publishing crates to crates.io..."
    - cd lib; cargo publish --verbose --allow-dirty --no-verify; cd ..

    # Give package index some time to sync
    - sleep 60

    - cd cli; cargo publish --verbose --allow-dirty --no-verify; cd ..
    - cd gtk3; cargo publish --verbose --allow-dirty --no-verify; cd ..

# Publish Docker image on repository registry
release-docker:
  image: docker:latest
  stage: release
  only:
    - /^v(\d+\.)*\d+$/
  dependencies:
    - package-docker
  services:
    - docker:dind
  variables:
    TARGET: x86_64-unknown-linux-musl
    DOCKER_HOST: tcp://docker:2375
    IMAGE_NAME: prs:$CI_COMMIT_SHA
    # DOCKER_DRIVER: overlay2
  before_script: []
  script:
    # Import Docker image
    - docker image load -i ./prs-docker-$TARGET.tar

    # Retag version
    - VERSION=$(echo $CI_COMMIT_REF_NAME | cut -c 2-)
    - echo "Determined Docker image version number 'v$VERSION', retagging image..."
    - docker tag $IMAGE_NAME registry.gitlab.com/timvisee/prs:$VERSION
    - docker tag $IMAGE_NAME registry.gitlab.com/timvisee/prs:latest

    # Authenticate and push the Docker images
    - 'docker login registry.gitlab.com -u $DOCKER_USER -p $DOCKER_PASS'
    - docker push registry.gitlab.com/timvisee/prs:$VERSION
    - docker push registry.gitlab.com/timvisee/prs:latest

# Publish Docker image on Docker hub
release-docker-hub:
  image: docker:latest
  stage: release
  only:
    - /^v(\d+\.)*\d+$/
  dependencies:
    - package-docker
  services:
    - docker:dind
  variables:
    TARGET: x86_64-unknown-linux-musl
    DOCKER_HOST: tcp://docker:2375
    IMAGE_NAME: prs:$CI_COMMIT_SHA
    # DOCKER_DRIVER: overlay2
  before_script: []
  script:
    # Import Docker image
    - docker image load -i ./prs-docker-$TARGET.tar

    # Retag version
    - VERSION=$(echo $CI_COMMIT_REF_NAME | cut -c 2-)
    - echo "Determined Docker image version number 'v$VERSION', retagging image..."
    - docker tag $IMAGE_NAME timvisee/prs:$VERSION
    - docker tag $IMAGE_NAME timvisee/prs:latest

    # Authenticate and push the Docker images
    - echo "$DOCKER_HUB_PASS" | docker login -u "$DOCKER_HUB_USER" --password-stdin
    - docker push timvisee/prs:$VERSION
    - docker push timvisee/prs:latest

# AUR packages release
release-aur:
  image: archlinux/base
  stage: release
  only:
    - /^v(\d+\.)*\d+$/
  timeout: 1h 30m
  before_script: []
  script:
    # Install dependencies
    - echo "Installing required build packages..."
    - pacman -Syu --noconfirm sudo base-devel binutils openssh rust cargo cmake git openssl python libxcb

    - cd ./pkg/aur

    # Determine the version number we're releasing for
    - VERSION=$(echo $CI_COMMIT_REF_NAME | cut -c 2-)
    - VERSION_HASH=$(git describe --long | cut -d'-' -f3)
    - 'echo "Determined version number: v$VERSION"'

    # Determine remote URLs and SHA checksums
    - echo "Getting SHA checksums for remote files..."
    - URL_SOURCE=https://gitlab.com/timvisee/prs/-/archive/v$VERSION/prs-v$VERSION.tar.gz
    - 'SHA_SOURCE=$(curl -sSL "$URL_SOURCE" | sha512sum | cut -d" " -f1)'
    - 'echo "Source checksum: $SHA_SOURCE ($URL_SOURCE)"'

    # Update PKGBUILDs
    - echo "Updating PKGBUILDS with release information..."
    - sed "s/__PKGVER__/$VERSION/" -i prs/PKGBUILD
    - sed "s/__PKGVER__/$VERSION.r1.$VERSION_HASH/" -i prs-git/PKGBUILD
    - sed "s/__SHA512SUM__/$SHA_SOURCE/" -i prs/PKGBUILD

    # Prepare for make
    - mkdir -p /.cargo
    - chmod -R 777 /.cargo

    # Make prs package
    - cd prs/
    - echo "Making prs package..."
    - sudo -u nobody makepkg -c
    - sudo -u nobody makepkg --printsrcinfo > .SRCINFO
    - cd ..

    # Make prs-git package
    - cd prs-git/
    - echo "Making prs-git package..."
    - sudo -u nobody makepkg -c
    - sudo -u nobody makepkg --printsrcinfo > .SRCINFO
    - cd ..

    # Set up SSH for publishing
    - mkdir -p /root/.ssh
    - cp ./aur.pub /root/.ssh/id_rsa.pub
    - echo "$AUR_SSH_PRIVATE" > /root/.ssh/id_rsa
    - echo "Host aur.archlinux.org" >> /root/.ssh/config
    - echo "  IdentityFile /root/.ssh/aur" >> /root/.ssh/config
    - echo "  User aur" >> /root/.ssh/config
    - chmod 600 /root/.ssh/{id_rsa*,config}
    - eval `ssh-agent -s`
    - ssh-add /root/.ssh/id_rsa
    - ssh-keyscan -H aur.archlinux.org >> /root/.ssh/known_hosts
    - git config --global user.name "timvisee"
    - git config --global user.email "tim@visee.me"

    # Publish prs package (clone AUR repo, commit update, push)
    - git clone ssh://aur@aur.archlinux.org/prs.git aur-prs
    - cd aur-prs
    - cp ../prs/{PKGBUILD,.SRCINFO} ./
    - git add PKGBUILD .SRCINFO
    - git commit -m "prs $VERSION"
    - git push
    - cd ..

    # Publish prs-git package (clone AUR repo, commit update, push)
    - git clone ssh://aur@aur.archlinux.org/prs-git.git aur-prs-git
    - cd aur-prs-git
    - cp ../prs-git/{PKGBUILD,.SRCINFO} ./
    - git add PKGBUILD .SRCINFO
    - git commit -m "prs-git $VERSION"
    - git push
    - cd ..
